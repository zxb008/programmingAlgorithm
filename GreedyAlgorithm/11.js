// 1217. 玩筹码
// 数轴上放置了一些筹码，每个筹码的位置存在数组 chips 当中。

// 你可以对 任何筹码 执行下面两种操作之一（不限操作次数，0 次也可以）：

// 将第 i 个筹码向左或者右移动 2 个单位，代价为 0。
// 将第 i 个筹码向左或者右移动 1 个单位，代价为 1。
// 最开始的时候，同一位置上也可能放着两个或者更多的筹码。

// 返回将所有筹码移动到同一位置（任意位置）上所需要的最小代价。

 

// 示例 1：

// 输入：chips = [1,2,3]
// 输出：1
// 解释：第二个筹码移动到位置三的代价是 1，第一个筹码移动到位置三的代价是 0，总代价为 1。
// 示例 2：

// 输入：chips = [2,2,2,3,3]
// 输出：2
// 解释：第四和第五个筹码移动到位置二的代价都是 1，所以最小总代价为 2。
 

// 提示：

// 1 <= chips.length <= 100
// 1 <= chips[i] <= 10^9

// 思路:分析题意可知，如果从第1移动到第3，从第3移动到第5......；如果从第2移动到第4，从第4移动到第6......；
// 以此类推，得出结论：奇数位置移动到奇数位置，偶数位置移动到偶数位置，都不会消耗代价。
// 所以可以将"所有奇数位置"移动到'奇数位置A',"所有偶数位置"移动到'偶数位置B',并且A和B相邻。
// 统计"奇数位置A"上面个数even，"偶数位置B"上面的个数odd,比较他们的大小，然后把较小移动到较大的。

/**
 * @param {number[]} position
 * @return {number}
 */
var minCostToMoveChips = function(position) {
    let odd = 0 , even = 0;
    for (let index = 0; index < position.length; index++) {
        if (position[index] % 2 === 0) {
            even++;
        } else {
            odd++;
        }
    }
    return odd > even ? even:odd;
};