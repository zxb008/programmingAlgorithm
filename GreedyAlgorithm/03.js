// //452. 用最少数量的箭引爆气球
// 在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以y坐标并不重要，因此只要知道开始和结束的x坐标就足够了。开始坐标总是小于结束坐标。平面内最多存在104个气球。

// 一支弓箭可以沿着x轴从不同点完全垂直地射出。在坐标x处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。

// Example:

// 输入:
// [[10,16], [2,8], [1,6], [7,12]]

// 输出:
// 2

// 解释:
// 对于该样例，我们可以在x = 6（射爆[2,8],[1,6]两个气球）和 x = 11（射爆另外两个气球）。

//题解：我们可以采用贪心算法，因为贪心算法得到的不一定是最优解，所以我们需要先对数组进行一个排序
//注意：贪心算法往往适合输入的是无序，然后要求得到最少xx或者最多xx，一个最优解
var findMinArrowShots = function (points) {
    if (points.length === 0 || points.length === 1) {
        return points.length
    }

    //1.从小到大排序
    points.sort((a, b) => {
        return a[0] - b[0]
    })
    let num = 1,
        end = points[0][1];
    for (let i = 1; i < points.length; i++){
       //从第二个开始遍历
       
       if (points[i][0] > end) {
           //如果第二个区间的开始坐标大于第一个区间的结束坐标
           //增加一只箭
           num++
           end = points[i][1]
       } else {
             //如果第二个区间的开始坐标小于于第一个区间的结束坐标

             //1.第三个区间的开始坐标比前面两个区间的结束坐标的最小值还要大，增加一只箭
             //2.第三个区间的开始坐标比前面两个区间的结束坐标的最小值还要小，不需要
             end = Math.min(end,points[i][1])
       }
    }
    return num
};
console.log(findMinArrowShots([[1,9],[7,16],[2,5],[7,12],[9,11],[2,10],[9,16],[3,9],[1,3]]));
