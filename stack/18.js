// 1541. 平衡括号字符串的最少插入次数
// 给你一个括号字符串 s ，它只包含字符 '(' 和 ')' 。一个括号字符串被称为平衡的当它满足：

// 任何左括号 '(' 必须对应两个连续的右括号 '))' 。
// 左括号 '(' 必须在对应的连续两个右括号 '))' 之前。
// 比方说 "())"， "())(())))" 和 "(())())))" 都是平衡的， ")()"， "()))" 和 "(()))" 都是不平衡的。

// 你可以在任意位置插入字符 '(' 和 ')' 使字符串平衡。

// 请你返回让 s 平衡的最少插入次数。

 

// 示例 1：

// 输入：s = "(()))"
// 输出：1
// 解释：第二个左括号有与之匹配的两个右括号，但是第一个左括号只有一个右括号。我们需要在字符串结尾额外增加一个 ')' 使字符串变成平衡字符串 "(())))" 。
// 示例 2：

// 输入：s = "())"
// 输出：0
// 解释：字符串已经平衡了。
// 示例 3：

// 输入：s = "))())("
// 输出：3
// 解释：添加 '(' 去匹配最开头的 '))' ，然后添加 '))' 去匹配最后一个 '(' 。
// 示例 4：

// 输入：s = "(((((("
// 输出：12
// 解释：添加 12 个 ')' 得到平衡字符串。
// 示例 5：

// 输入：s = ")))))))"
// 输出：5
// 解释：在字符串开头添加 4 个 '(' 并在结尾添加 1 个 ')' ，字符串变成平衡字符串 "(((())))))))" 。
 

// 提示：

// 1 <= s.length <= 10^5
// s 只包含 '(' 和 ')' 。


// 关键是将补齐括号动作，融入匹配过程，使得匹配能正常进行下去。
// 设空栈S，扫描时，
// 当s[i] == '('时，入栈S。i++。
// 当s[i] == ')'时，开始匹配。匹配条件是'('对应'))'。
// 要正确匹配，'('必须消耗一个。如果S为空，就要补一个'('，否则，S出栈一个。
// 同时，')'必须要消耗两个。
// 如果s[i+1]==')'时，说明有两个')'，匹配，消耗掉，i+=2。
// 否则，还要补充一个')'，才能匹配。



/**
 * @param {string} s
 * @return {number}
 */
var minInsertions = function(s) {
    const  stack = [];
    let insertCount = 0;
    for (let index = 0; index < s.length; index++) {
        const element = s[index];
        if ( element === '(' ) {
            // 遇到左括号，入栈
            stack.push(element)
        } else {
            // 遇到右括号，说明要进行匹配

            if (stack.length > 0) {
                // 栈不为空，弹出栈顶元素"(" [也就是说要消耗掉一个"(" ]
                stack.pop();
            } else {
                // 栈空，说明没有 "("; 故需要插入一个"(",也就是计数变量++
                insertCount++
            }

            // 然后再看下一个元素是否是右括号
            if (s[index+1]===")") {
                // 下一个元素是右括号,那就跳过下一次的循环
                index++;
            } else {
                //插入一个右括号")"，计数变量++
                insertCount++
            }
        }
    }
    // 有可能栈不为空，但是循环已经结束
    if (stack.length) {
        insertCount += 2*stack.length;
    }
    return insertCount;
};
console.log(minInsertions("))())("));